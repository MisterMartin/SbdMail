'''This code was generated by chatGPT, and only required minor tweaking to get running.

Here's the prompt:
write an object oriented python3 program using the email module and the imaplib module 
with ssl4 to fetch email messages with a specified subject and within a specified date 
range from imap.gmail.com. Download attachments.
'''

import imaplib
import email
from email.header import decode_header
from datetime import datetime, timedelta

class GmailFetcher:
    VERBOSE = True
    def __init__(self, email_address, password):
        self.email_address = email_address
        self.password = password
        self.imap_server = 'imap.gmail.com'

    def fetch_emails(self, subject, start_date, end_date):
        # Connect to the IMAP server with SSL encryption
        imap_conn = imaplib.IMAP4_SSL(self.imap_server)

        # Log in to the email account
        imap_conn.login(self.email_address, self.password)

        # Select the mailbox (in this case, the inbox)
        imap_conn.select('INBOX')

        # Define the search criteria based on the subject and date range
        start_date_str = start_date.strftime('%d-%b-%Y')
        end_date_str = end_date.strftime('%d-%b-%Y')
        search_criteria = f'(SUBJECT "{subject}") (SINCE "{start_date_str}" BEFORE "{end_date_str}")'
        if self.VERBOSE:
            print(f'Search criteria: {search_criteria}')

        # Search for emails that match the criteria
        result, email_ids = imap_conn.search(None, search_criteria)
        if self.VERBOSE:
            print(f'Email IDs: {email_ids}')

        # Loop through each email ID and fetch the email data
        emails = []
        for email_id in email_ids[0].split():

            result, data = imap_conn.fetch(email_id, '(RFC822)')
            raw_email = data[0][1]
            email_message = email.message_from_bytes(raw_email)

            # Parse the email headers
            subject = decode_header(email_message['Subject'])[0][0]
            if isinstance(subject, bytes):
                subject = subject.decode()

            sender = decode_header(email_message['From'])[0][0]
            if isinstance(sender, bytes):
                sender = sender.decode()

            date_str = email_message['Date']
            date = datetime.strptime(date_str[:-6], '%d %b %Y %H:%M:%S')

            if self.VERBOSE:
                print(f'Message {int(email_id)} {date_str}')

            # Loop through the email parts to find attachments
            attachments = []
            for part in email_message.walk():
                if part.get_content_maintype() == 'multipart':
                    continue
                if part.get('Content-Disposition') is None:
                    continue
                if part.get_filename():
                    filename = decode_header(part.get_filename())[0][0]
                    if isinstance(filename, bytes):
                        filename = filename.decode()

                    # Download the attachment
                    attachment_data = part.get_payload(decode=True)
                    attachments.append({
                        'filename': filename,
                        'data': attachment_data,
                    })

            # Add the email data and attachments to the list of emails
            emails.append({
                'subject': subject,
                'sender': sender,
                'date': date,
                'attachments': attachments,
            })

        # Close the connection to the IMAP server
        imap_conn.close()
        imap_conn.logout()

        return emails

if __name__ == '__main__':
    # Catch SIGINT
    import signal
    import sys
    def sigint_handler(x, y):
        '''Catch SIGINT so that we can terminate without a backtrace
        '''
        print('')
        print(f'{sys.argv[0]} terminated by SIGINT')
        sys.exit(0)

    signal.signal(signal.SIGINT, sigint_handler)

    email_address = 'email@gmail.com'
    password = 'password'
    subject = 'subject'
    start_date = datetime(2023, 4, 7)
    end_date = datetime(2023, 4, 9)

    fetcher = GmailFetcher(email_address, password)
    emails = fetcher.fetch_emails(subject, start_date, end_date)

    # Print the list of emails and attachments
    for email in emails:
        print(f'{email["subject"]} from {email["sender"]} on {email["date"].strftime("%Y-%m-%d %H:%M:%S")}')
        for attachment in email['attachments']:
            print(attachment['filename'], str(attachment['data']))